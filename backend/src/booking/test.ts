// model Slot {
//   slotId       Int      @id @default(autoincrement())
//   doctorId     Int?     // –°–ª–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–∫—Ç–æ—Ä—É
//   diagnosticId Int?     // –ò–ª–∏ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
//   locationId   Int      // –ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–æ–∫–∞—Ü–∏–∏
//   startTime    DateTime  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
//   endTime      DateTime  // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
//   dayNumber    Int      // –°–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
//   monthNumber  Int      // –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (1-12) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
//   isBooked     Boolean  @default(false) // –§–ª–∞–≥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   doctor       Doctor?     @relation(fields: [doctorId], references: [doctorId])
//   diagnostic   Diagnostic? @relation(fields: [diagnosticId], references: [diagnosticId])
//   location     Location    @relation(fields: [locationId], references: [locationId])
//   booking      Booking?    // –°—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç

//   @@map("slots")
// }

// model Booking {
//   bookingId        Int      @id @default(autoincrement())
//   userId           Int?
//   telegramId       String?
//   userName         String
//   userSurname      String
//   userPhoneNumber  String
//   userEmail        String?
//   userMessage      String?
//   bookingDateTime  DateTime @db.Timestamptz
//   doctorId         Int?
//   diagnosticId     Int?
//   locationId       Int
//   slotId           Int?     // –£–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
//   status           BookingStatus @default(PENDING)
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
//   deletedAt        DateTime?

//   user             User?     @relation(fields: [userId], references: [userId])
//   doctor           Doctor?   @relation(fields: [doctorId], references: [doctorId])
//   diagnostic       Diagnostic? @relation(fields: [diagnosticId], references: [diagnosticId])
//   location         Location  @relation(fields: [locationId], references: [locationId])
//   slot             Slot?    @relation(fields: [slotId], references: [slotId])
//   results          DiagnosticResult[]

//   @@unique([doctorId, locationId, bookingDateTime], name: "unique_doctor_location_time")
//   @@unique([diagnosticId, locationId, bookingDateTime], name: "unique_diagnostic_location_time")

//   @@map("bookings")
// }

// enum BookingStatus {
//   PENDING
//   FINISHED
//   CANCELLED
// }

// import { Injectable, BadRequestException } from '@nestjs/common'
// import { CreateBookingDto } from './dto/create-booking.dto'
// import { DbService } from 'src/db/db.service'
// import { BaseService } from 'src/common/base.service'
// import { BotService } from 'src/both/bot.service'

// @Injectable()
// export class BookingService extends BaseService {
// 	constructor(
// 		private readonly dbService: DbService,
// 		private readonly botService: BotService
// 	) {
// 		super(BookingService.name)
// 	}

// 	async findByIdBookLoc(bookingId: number) {
// 		try {
// 			const booking = await this.dbService.booking.findUnique({
// 				where: { bookingId: bookingId },
// 				include: {
// 					doctor: true,
// 					location: true,
// 					diagnostic: true,
// 				},
// 			})

// 			if (!booking) {
// 				throw new BadRequestException(
// 					`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID: ${bookingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î`
// 				)
// 			}

// 			return booking
// 		} catch (error) {
// 			this.handleException(error, 'findByIdBookLoc booking')
// 		}
// 	}

// 	async getBookingNotificationText(bookingId: number) {
// 		console.log('Booking ID:', bookingId)
// 		try {
// 			const booking = await this.findByIdBookLoc(bookingId)

// 			console.log('Booking:', booking)
// 			let fieldDoc: string
// 			if (booking?.doctor?.doctorId) {
// 				fieldDoc = `üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä: ${booking.doctor.fullName}\n`
// 			} else if (booking?.diagnosticId) {
// 				fieldDoc = `üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${booking.diagnostic.typeName}\n`
// 			} else {
// 				fieldDoc = '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö'
// 			}

// 			const notificationText = `
//       üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. üéâ\n\n
//       üìã –ó–∞–ø–∏—Å—å ‚Ññ: ${booking.bookingId}\n
//       ${fieldDoc}
//       üìç –õ–æ–∫–∞—Ü–∏—è: ${booking.location.name}: ${booking.location.address}\n\n
//         –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ üìû.
//       `

// 			return notificationText
// 		} catch (error) {
// 			this.handleException(error, 'getBookingNotificationText booking')
// 		}
// 	}

// 	async creationSlotDoc(dto: CreateBookingDto) {
// 		try {
// 			const initData = dto.userInitData

// 			const isSlot = await this.dbService.slot.findFirst({
// 				where: {
// 					startTime: dto.bookingDateTime,
// 					diagnosticId: dto.diagnosticId,
// 					doctorId: dto.doctorId,
// 					locationId: dto.locationId,
// 				},
// 			})

// 			const date = new Date(dto.bookingDateTime)
// 			const hours = String(date.getHours()).padStart(2, '0')
// 			const minutes = String(date.getMinutes()).padStart(2, '0')
// 			const mount = date.getMonth()

// 			if (isSlot) {
// 				throw new BadRequestException(
// 					`–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ${hours}:${minutes} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ`
// 				)
// 			}

// 			const slot = await this.dbService.slot.create({
// 				data: {
// 					doctorId: dto.doctorId,
// 					diagnosticId: dto.diagnosticId,
// 					locationId: dto.locationId,
// 					startTime: dto.bookingDateTime,
// 					monthNumber: new Date(dto.bookingDateTime).getMonth() + 1,
// 				},
// 			})

// 			const booking = await this.dbService.booking.create({
// 				data: {
// 					telegramId: dto.telegramId,
// 					userName: dto.userName,
// 					userSurname: dto.userSurname,
// 					userPhoneNumber: dto.userPhoneNumber,
// 					userEmail: dto.userEmail,
// 					userMessage: dto.userMessage,
// 					bookingDateTime: dto.bookingDateTime,
// 					doctorId: dto.doctorId,
// 					diagnosticId: dto.diagnosticId,
// 					locationId: dto.locationId,
// 					slotId: slot.slotId,
// 				},
// 			})

// 			const fieldDoc = await this.getBookingNotificationText(booking.bookingId)
// 			if (fieldDoc) {
// 				await this.botService.sendMessage(booking.telegramId, fieldDoc)
// 			}
// 			await this.sendMessage(booking.telegramId, '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')

// 			return booking
// 		} catch (error) {
// 			this.handleException(error, 'creationSlotDoc bookings')
// 		}
// 	}

// 	private async sendMessage(userId: string, fieldDoc: string) {
// 		// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
// 		// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø (—Å—Ç—Ä–æ–∫–∞)
// 	}

// 	async findAll() {
// 		try {
// 			const booking = await this.dbService.booking.findMany({
// 				// include: {
// 				//  specialty: true,
// 				//  location: true,
// 				// },
// 			})
// 			return booking
// 		} catch (error) {
// 			this.handleException(error, 'findAll bookings')
// 		}
// 	}
// }
