// src/cors-config.ts

// export const corsOptions = {
// 	origin: '*', // Замените на домен вашего клиента
// 	// origin: 'http://localhost:5173', // Замените на домен вашего клиента
// 	methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],
// 	credentials: true, // Разрешает запросы с учетными данными (true записывается access-token в cookies, на фронте axios.create({ withCredentials: true }) )
// }

// ----------------------------------------
const var1 = 'ЭТОТ вариант работает разработке'
export const corsConfig = {
	origin: '*',
	methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],
	preflightContinue: false,
}
// ----------------------------------------

// ----------------------------------------
// export const corsConfig = {
// 	origin: '*', // c любых путей
// 	methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'], // Разрешает только эти HTTP методы
// 	allowedHeaders: 'Content-Type, Accept',, // Разрешает только эти заголовки
// }

// ----------------------------------------
// --------  credentials: true
// Параметр credentials определяет, должны ли запросы с учетная
// данными (например, cookies, HTTP аутентификация) быть включены в ответ.
// Когда credentials установлено в true, сервер включает соответствующие
// заголовки (Access-Control-Allow-Credentials: true) в ответ,
// что позволяет браузеру включать учетные данные при выполнении кросс-доменных запросов.

// ВАЖНЫЙ МОМЕНТ
// Это важно для сценариев, где необходимо аутентифицированный доступ к ресурсам
// на другом домене. Однако стоит отметить,
// что при использовании credentials: true, значение origin должно быть явно указано,
// а не использовать wildcard *, поскольку это требование безопасности.

// ---------------- preflightContinue
// Параметр preflightContinue контролирует поведение сервера
// при получении предварительного запроса OPTIONS.
// Предварительный запрос — это специальный тип HTTP-запроса,
// который отправляется браузером перед основным запросом,
// чтобы проверить, разрешит ли сервер основной запрос с заданными
// методом и заголовками.
// preflightContinue: false
// Когда preflightContinue установлен в false,
// сервер не будет продолжать обработку основного запроса
// после получения положительного ответа на предварительный запрос.
