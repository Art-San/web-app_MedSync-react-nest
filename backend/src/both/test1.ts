import { BadRequestException, Injectable, OnModuleInit } from '@nestjs/common'
import * as TelegramBot from 'node-telegram-bot-api'
import {
	extractInfoCallbackQueryCTX,
	getUserDetailsFromTelegramContext,
} from './utils/context-helpers'
import { mainMenuInlineKeyboard, textMainMenu } from './keyboards/inline'
import {
	ReplyKeyboard,
	InlineKeyboard,
	InlineKeyboardButton,
	KeyboardButton,
	Row,
	ForceReply,
} from 'node-telegram-keyboard-wrapper'

export interface Telegram {
	chatId: string
	token: string
}
export interface BotState {
	isReplyKeyboardOpen: boolean
}

@Injectable()
export class BotService implements OnModuleInit {
	bot: TelegramBot
	options: Telegram
	botState: BotState

	constructor() {
		this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
			polling: true,
		})
		this.botState = {
			isReplyKeyboardOpen: false,
		}
	}

	async sendMessage(chatId: string, msg: string, options?: any) {
		try {
			await this.bot.sendMessage(chatId, msg, {
				parse_mode: 'HTML', // —á—Ç–æ –±—ã HTML —Ç–µ–≥–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å –≤ —Ç–æ –¥–ª—è —á–µ–≥–æ –æ–Ω–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã
				...options,
			})
		} catch (error) {
			throw new BadRequestException(error, 'BotService sendMessage')
		}
	}

	async hasBotCommands(entities: TelegramBot.MessageEntity[]) {
		// console.log(23, !entities)
		// console.log(23, !(entities instanceof Array))
		if (!entities || !(entities instanceof Array)) {
			return false
		}

		return entities.some((e) => e.type === 'bot_command')
	}

	async onModuleInit() {
		const replyKeyboard = new ReplyKeyboard()
		const inlineKeyboard = new InlineKeyboard()

		const firstReplyKeyboardRowToShowConstructor = new Row<KeyboardButton>(
			new KeyboardButton('1:1 Button'),
			new KeyboardButton('1:2 Button')
		)

		const secondReplyKeyboardRowToShowRowAsArray = new Row<KeyboardButton>()

		secondReplyKeyboardRowToShowRowAsArray.push(
			new KeyboardButton('2:1 Button'),
			new KeyboardButton('2:2 Button')
		)

		replyKeyboard.push(
			firstReplyKeyboardRowToShowConstructor,
			secondReplyKeyboardRowToShowRowAsArray
		)

		inlineKeyboard.push(
			/**
			 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–∏–ø –∑–¥–µ—Å—å –∏–∑-–∑–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ InlineKeyboardButton
			 * –°–º. —Ñ–∞–π–ª –†–æ—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–∞—à–∏–Ω–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
			 */

			new Row<InlineKeyboardButton>(
				new InlineKeyboardButton('1:2 Button', 'url', 'https://www.google.com'),
				new InlineKeyboardButton('1:1 Button', 'callback_data', 'Works 1!'),
				new InlineKeyboardButton('1:2 Button', 'callback_data', 'Works 2!')
			),
			new Row<InlineKeyboardButton>(
				new InlineKeyboardButton('2:1 Button', 'callback_data', 'Works 3!'),
				new InlineKeyboardButton('2:2 Button', 'callback_data', 'Works 4!')
			)
		)

		this.bot.onText(/\.–∫—É–∑–¥–Ω–õ—É–Ω–∏—â—Ñ–∫–≤/i, async (msg) => {
			const messageOptions: TelegramBot.SendMessageOptions = {
				reply_markup: replyKeyboard.getMarkup(),
			}
			console.log(23, 'messageOptions', messageOptions)
			await this.bot.sendMessage(
				msg.from.id,
				'–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –µ–µ.',
				messageOptions
			)
			this.botState.isReplyKeyboardOpen = true
		})

		this.bot.onText(/\/forceReply/i, (msg) => {
			const options: TelegramBot.SendMessageOptions = {
				reply_markup: ForceReply.getMarkup(),
			}

			this.bot.sendMessage(
				msg.from.id,
				'–≠–π, —ç—Ç–æ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç–≤–µ—Ç—å –º–Ω–µ. –î–∞ –ª–∞–¥–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π.',
				options
			)
		})

		this.bot.onText(/\/inlineKeyboard/i, (msg) => {
			const options: TelegramBot.SendMessageOptions = {
				reply_markup: inlineKeyboard.getMarkup(),
			}

			console.log(23, 'options', options)

			this.bot.sendMessage(
				msg.from.id,
				'–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.',
				options
			)
		})

		this.bot.on('message', async (msg) => {
			if (!this.hasBotCommands(msg.entities)) {
				if (this.botState.isReplyKeyboardOpen) {
					const options: TelegramBot.SendMessageOptions = {
						reply_markup: replyKeyboard.remove(),
					}

					await this.bot.sendMessage(
						msg.from.id,
						'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ó–∞–∫—Ä—ã–≤–∞—é –æ—Ç–≤–µ—Ç –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.',
						options
					)
					this.botState.isReplyKeyboardOpen = false
				} else if (!!msg.reply_to_message) {
					await this.bot.sendMessage(
						msg.from.id,
						'–ö–ê–ö –¢–´ –ü–û–°–ú–ï–õ! –ù–æ —Å–∏–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–ª.'
					)
				}
			}
		})

		this.bot.on('callback_query', async (query) => {
			await this.bot.answerCallbackQuery(query.id, {
				text: '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!',
			})
			await this.bot.sendMessage(
				query.from.id,
				'–ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É! ;) –ò—Ç–∞–∫, –∫–∞–∫ –≤—ã –≤–∏–¥–µ–ª–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!'
			)
		})

		this.bot.on('polling_error', (err) =>
			console.log('polling_error', err.message)
		)
	}
}

// <div class="bubble-content-wrapper"><div class="bubble-content"><div class="message spoilers-container" dir="auto"><span class="translatable-message">Here is your booking list. Select one to see details</span><span class="time"><span class="i18n" dir="auto">21:14</span><div class="time-inner" title="30 September 2024, 21:14:23"><span class="i18n" dir="auto">21:14</span></div></span><span class="clearfix"></span></div><svg viewBox="0 0 11 20" width="11" height="20" class="bubble-tail"><use href="#message-tail-filled"></use></svg></div><div class="reply-markup"><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">29 September - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">11 September - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">06 September - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">06 September - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">30 August - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f52c.png" class="emoji emoji-image" alt="üî¨">29 August - Blood Tests</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f52c.png" class="emoji emoji-image" alt="üî¨">27 August - Computed Tomography</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">25 August - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">13 August - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text"><img src="assets/img/emoji/1f468-200d-2695.png" class="emoji emoji-image" alt="üë®‚Äç‚öïÔ∏è">31 July - Samuel Rhodes</span></button></div><div class="reply-markup-row"><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text">1</span></button><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text">&lt;</span></button><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text">1</span></button><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text">&gt;</span></button><button class="reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text">2</span></button></div><div class="reply-markup-row"><button class="is-first is-last reply-markup-button rp"><div class="c-ripple"></div><span class="reply-markup-button-text">Exit</span></button></div></div></div>
